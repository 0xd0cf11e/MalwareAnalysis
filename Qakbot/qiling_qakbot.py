'''
    This script is to demonstrate how to use qiling to extract payloads from Qakbot binaries.

    The binary used is saved under /bin in a zip (password:infected)
'''

import argparse
import pefile
import struct
from qiling import *


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-f', help="Qakbot file", required=True)
    parser.add_argument('-l', help="List all the resources", action='store_true', required=False)
    parser.add_argument('-r', help="Specify specific resources to extract", nargs='*', required=False)
    parser.add_argument('-e', help="Extract all resources", action='store_true', required=False)
    parser.add_argument('-d', help="Apply decompression", action='store_true', required=False)
    args = parser.parse_args()

    fpath = args.f
    data = open(fpath, 'rb').read()
    pe = pefile.PE(data=data)
    rsrcs = list()
    
    ql = Qiling(["bin/qakbot.bin"], "/qiling/examples/rootfs/x86_windows", output="default")
    begin = 0x4040f6
    end = 0x4040fb

    names = list()
    for rsrc in pe.DIRECTORY_ENTRY_RESOURCE.entries:
        for entry in rsrc.directory.entries:
            rsrcs.append(entry)
            names.append(entry.name.__str__())
    if args.l:
        print(f'Listing Resources: {names}')
    
    # Flags used by the subroutine
    decompress = 0x4 if args.d else 0x0
    if args.r:
        names = args.r
    
    if args.r or args.e:
        for rsrc in rsrcs:
            if rsrc.name:
                offset = rsrc.directory.entries[0].data.struct.OffsetToData
                size = rsrc.directory.entries[0].data.struct.Size
                print(f'Resource name: {rsrc.name}, Offset: {offset}, Size: {size}')
                
                try:
                    if rsrc.name.__str__() in names:
                        encoded = pe.get_memory_mapped_image()[offset:offset+size]
                        addr = ql.os.heap.alloc(size)
                        ql.mem.write(addr=addr, data=encoded)
                        ql.stack_push(decompress)
                        ql.stack_push(0x0)
                        ql.stack_push(size)
                        ql.stack_push(addr)
                        ql.run(begin=begin, end=end)
                        mem = ql.reg.eax
                        # A newly allocated heap contains the offset and size of the decoded payload
                        #   at 0x424 and 0x428 respectively
                        decoded_size = struct.unpack('<I', ql.mem.read(mem + 0x428, 0x4))[0]
                        decoded_heap = struct.unpack('<I', ql.mem.read(mem + 0x424, 0x4))[0]
                        print(f'Decoded result - Size: {hex(decoded_size)}, Location: {hex(decoded_heap)}')
                        decoded = ql.mem.read(decoded_heap, decoded_size)
                        dump_path = fpath + '_' + rsrc.name.__str__() + '.dump'
                        f = open(dump_path, 'wb')
                        f.write(decoded)
                        f.close()
                        print(f'Dumped at: {dump_path}')
                except Exception as err:
                    print(err)
    
if __name__ in "__main__":
    main()